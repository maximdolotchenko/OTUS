apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: authstatefulset
  labels:
    app: authstatefulset
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      env: authpostgresLabel
  template:
    metadata:
      name: postgresM
      labels:
        env: authpostgresLabel
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag}}"
          lifecycle:
            postStart:
              exec:
                command: ["/bin/bash", "-c", "sleep 10 && PGPASSWORD=$POSTGRES_PASSWORD psql $POSTGRES_DB -U $POSTGRES_USER -c \'CREATE TABLE IF NOT EXISTS users (id BIGSERIAL PRIMARY KEY, first_name VARCHAR(200) NOT NULL, last_name  VARCHAR(200) NOT NULL, email VARCHAR(254) NOT NULL, login VARCHAR(254) NOT NULL, password VARCHAR(254) NOT NULL);\'"]
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.postgresql.port }}
          volumeMounts:
            - name: volume
              mountPath: /cache/auth
          env:
            - name: POSTGRES_PASSWORD
              value: {{ .Values.postgresql.password | quote }}
            - name: POSTGRES_USER
              value: {{ .Values.postgresql.username | quote }}
            - name: POSTGRES_DB
              value: {{ .Values.postgresql.database | quote }}
  volumeClaimTemplates:
    - metadata:
        name: volume
      spec:
        accessModes: [ "{{.Values.volumeClaim.accessMode}}" ]
        storageClassName: ""
        resources:
          requests:
            storage: {{ .Values.volumeClaim.size}}

